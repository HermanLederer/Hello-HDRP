#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/UberPostFeatures.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMain_Variant0 MAIN=KMain_Variant0 VARIANT=0
#pragma kernel KMain_Variant1 MAIN=KMain_Variant1 VARIANT=1
#pragma kernel KMain_Variant2 MAIN=KMain_Variant2 VARIANT=2
#pragma kernel KMain_Variant3 MAIN=KMain_Variant3 VARIANT=3
#pragma kernel KMain_Variant4 MAIN=KMain_Variant4 VARIANT=4
#pragma kernel KMain_Variant5 MAIN=KMain_Variant5 VARIANT=5
#pragma kernel KMain_Variant6 MAIN=KMain_Variant6 VARIANT=6
#pragma kernel KMain_Variant7 MAIN=KMain_Variant7 VARIANT=7

// CUSTOM TODO in a future project: Implement dithered rendering and positive afterimage for physically based motion blur
TEXTURE2D_X(_InputTexture);
//TEXTURE2D_X(_AfterimageTexture);
TEXTURE2D_X(_SorenessTexture);
TEXTURE2D(_EyeLightTexture);
TEXTURE2D_X(_BloomTexture);
TEXTURE2D_X(_BloomHaloTexture);
TEXTURE2D(_BloomDirtTexture);
TEXTURE2D(_ChromaSpectralLut);
TEXTURE3D(_LogLut3D);
TEXTURE2D(_VignetteMask);

RW_TEXTURE2D_X(float3, _OutputTexture);

SAMPLER(sampler_LinearClamp);
SAMPLER(sampler_ChromaSpectralLut);
SAMPLER(sampler_LogLut3D);
SAMPLER(sampler_VignetteMask);

CBUFFER_START(cb0)
    float4 _ChromaParams;
    float4 _EyelidParams;
    float4 _VignetteParams1;
    float4 _VignetteParams2;
    float4 _VignetteColor;
    float4 _DistortionParams1;
    float4 _DistortionParams2;
    float4 _LogLut3D_Params;        // x: 1 / lut_size, y: lut_size - 1, z: postexposure, w: enabled
    float4 _BloomParams;
    float4 _BloomHaloParams;
    float4 _BloomThreshold;
    float4 _BloomTint;
    float4 _BloomDirtScaleOffset;
    float4 _BloomBicubicParams;
    float4 _LMSRParams;
    float4 _DebugFlags;
    float4 _AfterimageParams;
CBUFFER_END

#define DistCenter              _DistortionParams1.xy
#define DistAxis                _DistortionParams1.zw
#define DistTheta               _DistortionParams2.x
#define DistSigma               _DistortionParams2.y
#define DistScale               _DistortionParams2.z
#define DistIntensity           _DistortionParams2.w

#define ChromaAmount            _ChromaParams.x
#define ChromaMaxSamples        int(_ChromaParams.y)

#define VignetteCenter          _VignetteParams1.xy
#define VignetteMode            uint(_VignetteParams1.z)
#define VignetteIntensity       _VignetteParams2.x
#define VignetteSmoothness      _VignetteParams2.y
#define VignetteRoundness       _VignetteParams2.z
#define VignetteRounded         _VignetteParams2.w
#define VignetteColor           _VignetteColor.xyz
#define VignetteOpacity         _VignetteColor.w

#define PostExposure            _LogLut3D_Params.z
#define GradingEnabled          _LogLut3D_Params.w

#define BloomTint               _BloomTint.xyz
#define BloomIntensity          _BloomParams.x
#define DirtIntensity           _BloomParams.y
#define BloomEnabled            _BloomParams.z
#define DirtEnabled             _BloomParams.w
#define BloomHaloIntensity      _BloomHaloParams.x
#define BloomHaloEnabled        _BloomHaloParams.y
#define DirtScale               _BloomDirtScaleOffset.xy
#define DirtOffset              _BloomDirtScaleOffset.zw

#define OutputLogEnabled        _DebugFlags.x

float2 DistortUV(float2 uv)
{
    // Lens distortion
    // Note: this variant should never be set with XR
    if (VARIANT & UBERPOSTFEATUREFLAGS_LENS_DISTORTION)
    {
        uv = (uv - 0.5) * DistScale + 0.5;
        float2 ruv = DistAxis * (uv - 0.5 - DistCenter);
        float ru = length(float2(ruv));

        UNITY_BRANCH
        if (DistIntensity > 0.0)
        {
            float wu = ru * DistTheta;
            ru = tan(wu) * (rcp(ru * DistSigma));
            uv = uv + ruv * (ru - 1.0);
        }
        else
        {
            ru = rcp(ru) * DistTheta * atan(ru * DistSigma);
            uv = uv + ruv * (ru - 1.0);
        }
    }

    return uv;
}

float3 xyz2lab( float3 c ) {
    float3 n = c / float3(95.047, 100, 108.883);
    float3 v;
    v.x = ( n.x > 0.008856 ) ? pow( n.x, 1.0 / 3.0 ) : ( 7.787 * n.x ) + ( 16.0 / 116.0 );
    v.y = ( n.y > 0.008856 ) ? pow( n.y, 1.0 / 3.0 ) : ( 7.787 * n.y ) + ( 16.0 / 116.0 );
    v.z = ( n.z > 0.008856 ) ? pow( n.z, 1.0 / 3.0 ) : ( 7.787 * n.z ) + ( 16.0 / 116.0 );
    return float3(( 116.0 * v.y ) - 16.0, 500.0 * ( v.x - v.y ), 200.0 * ( v.y - v.z ));
}

float3 lab2xyz( float3 c ) {
    float fy = ( c.x + 16.0 ) / 116.0;
    float fx = c.y / 500.0 + fy;
    float fz = fy - c.z / 200.0;
    return float3(
         95.047 * (( fx > 0.206897 ) ? fx * fx * fx : ( fx - 16.0 / 116.0 ) / 7.787),
        100.000 * (( fy > 0.206897 ) ? fy * fy * fy : ( fy - 16.0 / 116.0 ) / 7.787),
        108.883 * (( fz > 0.206897 ) ? fz * fz * fz : ( fz - 16.0 / 116.0 ) / 7.787)
    );
}

float3 change_luminance(float3 c_in, float l_out)
{
    float l_in = Luminance(c_in);
    return c_in * (l_out / l_in);
}

float3 uncharted2_tonemap_partial(float3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

float3 uncharted2_filmic(float3 v)
{
    float exposure_bias = 2.0f;
    float3 curr = uncharted2_tonemap_partial(v * exposure_bias);

    float3 W = 11.2f.xxx;
    float3 white_scale = 1.0f.xxx / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}

// The code in this file was originally written by Stephen Hill (@self_shadow), who deserves all
// credit for coming up with this fit and implementing it. Buy him a beer next time you see him. :)

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
static const float3x3 ACESInputMat =
{
    {0.59719, 0.35458, 0.04823},
    {0.07600, 0.90834, 0.01566},
    {0.02840, 0.13383, 0.83777}
};

// ODT_SAT => XYZ => D60_2_D65 => sRGB
static const float3x3 ACESOutputMat =
{
    { 1.60475, -0.53108, -0.07367},
    {-0.10208,  1.10813, -0.00605},
    {-0.00327, -0.07276,  1.07602}
};

float3 RRTAndODTFit(float3 v)
{
    float3 a = v * (v + 0.0245786f) - 0.000090537f;
    float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

float3 ACESFitted(float3 color)
{
    color = mul(ACESInputMat, color);

    // Apply RRT and ODT
    color = RRTAndODTFit(color);

    color = mul(ACESOutputMat, color);

    // Clamp to [0, 1]
    color = saturate(color);

    return color;
}

#define GROUP_SIZE 8
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MAIN(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC;
    float2 uvDistorted = DistortUV(uv);
    float3 color = 0.0;

    // Chromatic aberration    
    // Inspired by the method described in "Rendering Inside" [Playdead 2016]
    // https://twitter.com/pixelmager/status/717019757766123520
    if (VARIANT & UBERPOSTFEATUREFLAGS_CHROMATIC_ABERRATION)
    {
        float2 coords = 2.0 * uv - 1.0;
        float2 end = uv - coords * dot(coords, coords) * ChromaAmount;
        float2 diff = end - uv;
        int samples = clamp(int(length(_ScreenSize.xy * diff / 2.0)), 3, ChromaMaxSamples);
        float2 delta = diff / samples;
        float2 pos = uv;
        float3 sum = 0.0, filterSum = 0.0;

        for (int i = 0; i < samples; i++)
        {
            float t = (i + 0.5) / samples;
            float3 s = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(DistortUV(pos)), 0.0).xyz;
            float3 filter = SAMPLE_TEXTURE2D_LOD(_ChromaSpectralLut, sampler_ChromaSpectralLut, float2(t, 0.0), 0).xyz;

            sum += s * filter;
            filterSum += filter;
            pos += delta;
        }

        color = sum / filterSum;
    }
    else
    {
        color = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uvDistorted), 0.0).xyz;
    }

    // Bloom
    UNITY_BRANCH
    if (BloomEnabled)
    {
		#if 0 // Bilinear
        	float3 bloom = SAMPLE_TEXTURE2D_X_LOD(_BloomTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uvDistorted), 0.0).xyz;
        #else
        	float3 bloom = SampleTexture2DBicubic(TEXTURE2D_X_ARGS(_BloomTexture, sampler_LinearClamp), uvDistorted * _RTHandleScale.xy, _BloomBicubicParams, _RTHandleScale.xy, unity_StereoEyeIndex).xyz;
        #endif

    	UNITY_BRANCH
    	if (BloomHaloEnabled)
    	{
			#if 0 // Bilinear
	        	float3 halo = SAMPLE_TEXTURE2D_X_LOD(_BloomHaloTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uvDistorted), 0.0).xyz;
	        #else
	        	float3 halo = SampleTexture2DBicubic(TEXTURE2D_X_ARGS(_BloomHaloTexture, sampler_LinearClamp), uvDistorted * _RTHandleScale.xy, _BloomBicubicParams, _RTHandleScale.xy, unity_StereoEyeIndex).xyz;
	        #endif

	        bloom = lerp(bloom, halo, BloomHaloIntensity);
    	}

        float3 thresholdedColor = QuadraticThreshold(color, _BloomThreshold.x, _BloomThreshold.yzw);
        color = lerp(color, (color - thresholdedColor) + (bloom * BloomTint), BloomIntensity);

        UNITY_BRANCH
        if (DirtEnabled)
        {
            // UVs for the dirt texture should be DistortUV(uv * DirtScale + DirtOffset) but
            // considering we use a cover-style scale on the dirt texture the difference isn't massive
            // so we chose to save a few ALUs here instead in case lens distortion is active
            float3 dirt = SAMPLE_TEXTURE2D_LOD(_BloomDirtTexture, sampler_LinearClamp, uvDistorted * DirtScale + DirtOffset, 0.0).xyz;
            color += bloom * dirt * DirtIntensity;
        }
    }

    // CUSTOM NOTE: Humans don't really have vignette do they?
    // Should I remove this and just use eyelids instead? 
    // Vignette
    if (VARIANT & UBERPOSTFEATUREFLAGS_VIGNETTE)
    {
        UNITY_BRANCH
        if (VignetteMode == 0u) // Procedural
        {
            float2 d = abs(uvDistorted - VignetteCenter) * VignetteIntensity;
            d.x *= lerp(1.0, _ScreenSize.x / _ScreenSize.y, VignetteRounded);
            d = pow(saturate(d), VignetteRoundness);
            float vfactor = pow(saturate(1.0 - dot(d, d)), VignetteSmoothness);
            color *= lerp(VignetteColor, (1.0).xxx, vfactor);
        }
        else // Masked
        {
            float vfactor = SAMPLE_TEXTURE2D_LOD(_VignetteMask, sampler_VignetteMask, uvDistorted, 0).w;
            vfactor = FastSRGBToLinear(vfactor);
            float3 newColor = color * lerp(VignetteColor, (1.0).xxx, vfactor);
            color = lerp(color, newColor, VignetteOpacity);
        }
    }

    // CUSTOM: Eyelids
    float eyeLight = SAMPLE_TEXTURE2D_X_LOD(_EyeLightTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uv), 0.0).x;
    float2 eyelidParams = float2(_EyelidParams.x, 1);
    eyelidParams.x *= smoothstep(13.5, 16, eyeLight);
    eyelidParams.y = lerp(1, _EyelidParams.y, smoothstep(13.5, 16, eyeLight));

    const float fade = 0.1;
    color *= smoothstep(eyelidParams.x, eyelidParams.x + fade, uv.y);
    color *= 1 - smoothstep(1 - eyelidParams.x - fade, 1 - eyelidParams.x, uv.y);
    color *= eyelidParams.y;


    // CUSTOM: Added this effect

    // no mans sky colors
    //float4 colorLMSR = LinearToLMSR(color);
    //color = LMSToLinear(colorLMSR.yzz);
    //color = color.yzz;


    // Dark hue shift lerp
    // float3 nightColor = RgbToHsv(color);
    // nightColor.x = RotateHue(nightColor.x, 1, _LMSRParams.z);
    // nightColor = HsvToRgb(nightColor);

    // float lum = Luminance(color);
    // float interp = smoothstep(_LMSRParams.x, _LMSRParams.y, lum);

    // color = lerp(lerp(color, nightColor, _LMSRParams.w), color, interp);


    // Dark monochrome hue shift lerp (looks best, but still not good enough, so just scrap that)
    //float3 nightColor = color.r * 0.1 + color.g * 0.5 + color.b * 0.4;
    //nightColor *= float3(0.1, 0.3, 0.6) * 3;

    //float lum = Luminance(color);
    //float interp = smoothstep(_LMSRParams.x, _LMSRParams.y, lum);
    
    //color = lerp(lerp(color, nightColor, _LMSRParams.w), color, interp);


    // Dark hue shift luma-shift (looks horrendous)
    // float lum = Luminance(color);
    // float interp = smoothstep(_LMSRParams.x, _LMSRParams.y, lum);
    
    // color = RgbToHsv(color);
    // color.x = RotateHue(color.x, 1, interp);
    // color = HsvToRgb(color);


    // CUSTOM: My own tonemapping
    // Tonemap
    // Reinhard
    // color = color / (1.0f + color);


    // Extended reinhard
    //float max_white = _LMSRParams.z;
    //float3 numerator = color * (1.0f + (color / float3(max_white * max_white,max_white * max_white,max_white * max_white)));
    //color = numerator / (1.0f + color);


    // Extended reinhard (luminance)
    // float max_white_l = _LMSRParams.z;
    // float l_old = Luminance(color);
    // float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));
    // float l_new = numerator / (1.0f + l_old);
    // color = change_luminance(color, l_new);


    // Reinhard-Jodie
    //float l = Luminance(color);
    //float3 tv = color / (1.0f + color);
    //color = lerp(color / (1.0f + l), tv, tv);


    // Uncharted 2
    //color = uncharted2_filmic(color);


    // Unity ACES
    color = AcesTonemap(unity_to_ACES(color));


    // Stephen Hill ACES
    //color = ACESFitted(color);


    // Krzysztof Narkowicz ACES
    // {
    //     float a = 2.51f;
    //     float b = 0.03f;
    //     float c = 2.43f;
    //     float d = 0.59f;
    //     float e = 0.14f;
    //     color = saturate((color*(a*color+b))/(color*(c*color+d)+e));
    // }
    

    // LOG Color
    //color = LinearToLogC(color);

    // CUSTOM: Disabeled all of that
    // Grading, tonemapping
    // The branch is only used for frame settings & exr log export - otherwise grading is always enabled
    // UNITY_BRANCH
    // if (OutputLogEnabled)
    // {
    //     // Output in log space for debug & exr export (external grading)
    //     color = saturate(LinearToLogC(color));
    // }
    // else if (GradingEnabled)
    // {
    //     // Artist request to fine tune exposure in post without affecting bloom, dof etc
    //     color *= PostExposure;

    //     // Move from linear to LogC
    //     float3 colorLutSpace = saturate(LinearToLogC(color));

    //     // Color lookup in the LogC lut
    //     color = ApplyLut3D(TEXTURE3D_ARGS(_LogLut3D, sampler_LogLut3D), colorLutSpace, _LogLut3D_Params.xy);
    // }

    // Positive afterimage
    //float3 previousColor = SAMPLE_TEXTURE2D_X_LOD(_AfterimageTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uv), 0.0).xyz;
    //color += previousColor * 0.1;

    // Negative afterimage
    float3 soreness = SAMPLE_TEXTURE2D_X_LOD(_SorenessTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uv), 0.0).xyz;
    color -= soreness * _AfterimageParams.x;

    // Done
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = color;
}
