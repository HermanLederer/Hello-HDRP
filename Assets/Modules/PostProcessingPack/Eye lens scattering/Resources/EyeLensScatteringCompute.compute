#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma kernel Clear
#pragma kernel RainbowBloom

TEXTURE2D_X(_InputTexture);
RW_TEXTURE2D_X(float3, _OutputTexture);
float _Radius;
float _Thickness;
uint _BladeCount;

#define GROUP_SIZE 8

float random(float2 uv)
{
	return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

//
//
// Clear compute
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Clear(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
    uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;

    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = float3(0, 0, 0);
}

//
//
// Scatter
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void RainbowBloom(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
    uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;
    //positionSS = uint2(max(1, positionSS.x), max(1, positionSS.y));
    float2 uv = posInputs.positionNDC;
    
	float3 currentColor = LOAD_TEXTURE2D_X(_InputTexture, positionSS).xyz;

	float circle = 6.2832; // Precalculated Pi*2
	float segment = circle / _BladeCount;
    for(float i = segment; i < circle + segment / 2; i += segment)
    {
        float jitteredI = i + (random(positionSS * i.xx) - 0.5) * 0.1;

    	float3 outColor = currentColor;

    	float rainbowCarryAmount = random(positionSS * jitteredI.xx);
    	float radius = _Radius + rainbowCarryAmount * _Thickness;

    	float crossover = 0.3333;

    	outColor *= float3(1 - smoothstep(0.3333-crossover, 0.3333+crossover, rainbowCarryAmount), 1, 1);										
    	outColor *= float3(1, smoothstep(0.3333-crossover, 0.3333+crossover, rainbowCarryAmount) * (1 - smoothstep(0.6666-crossover, 0.6666+crossover, rainbowCarryAmount)), 1);	
    	outColor *= float3(1, 1, smoothstep(0.6666-crossover, 0.6666+crossover, rainbowCarryAmount));											

    	uint x = uv.x + radius * cos(jitteredI);
    	uint y = uv.y + radius * sin(jitteredI);

		_OutputTexture[COORD_TEXTURE2D_X(uint2(x, y))] += outColor / _BladeCount;
    }
}