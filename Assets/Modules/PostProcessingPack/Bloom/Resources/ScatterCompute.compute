#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel Scatter

TEXTURE2D_X(_InputTexture);
RW_TEXTURE2D_X(float3, _OutputTexture);
int _Steps;
float _Radius;
float _Sigma;

SAMPLER(sampler_LinearClamp);

#define GROUP_SIZE 8

//
//
// Functions
float random(float2 uv)
{
	return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

//
//
// Scatter compute
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Scatter(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
    uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;
    //positionSS = uint2(max(1, positionSS.x), max(1, positionSS.y));
    
    float3 outColor = float3(0, 0, 0);
    float totalWeight = 0;
	for(int i = 1; i <= _Steps; i++)
	{
    	float x = (random(positionSS * i.xx) - 0.5) * 2 * _Radius;
    	float y = ((random(positionSS * i.xx + 0.1.xx) - 0.5) * 2 * _Radius);
    	float posX = positionSS.x + x;
    	float posY = positionSS.y + y;
        posX = max(1, posX);
        posY = max(1, posY);
        posX = min(_ScreenSize.x - 1, posX);
        posY = min(_ScreenSize.y - 1, posY);

		float2 scatterPos = uint2(posX, posY);

		float3 neighborColor = LOAD_TEXTURE2D_X(_InputTexture, scatterPos).xyz;
		//neighborColor *= lerp(1, 0, step(posX, 1));
		//neighborColor *= lerp(1, 0, step(posY, 1));

		//float br = Max3(neighborColor.x, neighborColor.y, neighborColor.z);
		float distancePreSQRT = x*x + y*y;
		float distance = sqrt(distancePreSQRT);
		float weight = 1 - (distance / _Radius);
        weight = max(0, weight);
        
        outColor += neighborColor * weight;
        totalWeight += weight;
	}
    totalWeight = max(0.1, totalWeight);
	outColor = (outColor / totalWeight);

    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = outColor;
}