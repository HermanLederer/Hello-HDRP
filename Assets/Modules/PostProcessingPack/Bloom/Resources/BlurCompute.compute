#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel Blur

TEXTURE2D_X(_InputTexture);
RW_TEXTURE2D_X(float3, _OutputTexture);

SAMPLER(sampler_LinearClamp);

CBUFFER_START(cb0)
    float4 _TexelSize;
    float4 _BloomThreshold;
CBUFFER_END

#define GROUP_SIZE 8

//
//
// Blur compute
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Blur(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _TexelSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;

    uint2 coords = COORD_TEXTURE2D_X(posInputs.positionSS).xy;

    float3 outColor = LOAD_TEXTURE2D_X(_InputTexture, coords).xyz;
    float totalWeight = 0;
	for(int x = -16; x <= 16; x++)
	{
		for(int y = -16; y <= 16; y++)
		{
	    	float posX = positionSS.x + x;
	    	float posY = positionSS.y + y;

			float2 blurPos = uint2(posX, posY);

			float3 neighborColor = LOAD_TEXTURE2D_X(_InputTexture, blurPos).xyz;
			//neighborColor *= lerp(0, 1, step(0, posX));
			//neighborColor *= lerp(0, 1, step(0, posY));

			float distancePreSQRT = x*x + y*y;
			float distance = sqrt(distancePreSQRT);
			float weight;
			weight = 1 - (distance / 16);
	        
	        outColor += (neighborColor) * weight;
	        totalWeight += weight;
		}
	}
	outColor = (outColor / totalWeight);

    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = outColor;
}