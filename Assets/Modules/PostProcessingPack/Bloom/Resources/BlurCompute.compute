#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel Upsample
#pragma kernel Blur
#pragma kernel VBlur

float4 _TexelSize;

TEXTURE2D_X(_InputTexture);
RW_TEXTURE2D_X(float3, _OutputTexture);
int _BlurSteps;
float _BlurStepSize;

SAMPLER(sampler_LinearClamp);

#define GROUP_SIZE 8

//
//
// Upsample
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Upsample(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
	PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
	uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;
	float2 uv = posInputs.positionNDC;
	positionSS *= _TexelSize.z;

	float3 outColor;
	outColor = LOAD_TEXTURE2D_X(_InputTexture, positionSS).xyz;
	//float3 outColor = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, positionSS, 0.0).xyz;

	_OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = outColor;
}

//
//
// Horizontal blur
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Blur(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
	PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
	float2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;
	positionSS *= _TexelSize.z;

	float3 outColor = LOAD_TEXTURE2D_X(_InputTexture, positionSS).xyz;
	float totalWeight = 1;
	for(int x = -_BlurSteps; x <= _BlurSteps; x++)
	{
		float posX = positionSS.x + x * _BlurStepSize;
		//int posY = positionSS.y + y * _BlurStepSize;
		posX = max(1, posX);
		//posY = max(1, posY);
		posX = min(_ScreenSize.x - 1, posX);
		//posY = min(_ScreenSize.y - 1, posY);

		uint2 blurPos = uint2(posX, positionSS.y);

		float3 neighborColor = float3(0, 0, 0);
		neighborColor += LOAD_TEXTURE2D_X(_InputTexture, blurPos).xyz;

		float distance = abs(x);
		float weight = 1 - (distance / (_BlurSteps * _BlurStepSize));
		weight = max(0, weight);

		outColor += (neighborColor) * weight;
		totalWeight += weight;
	}

	outColor = (outColor / totalWeight);

	_OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = outColor;
}

//
//
// Vertical blur
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void VBlur(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
	PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), float2(1, 1), uint2(GROUP_SIZE, GROUP_SIZE));
	uint2 positionSS = COORD_TEXTURE2D_X(posInputs.positionSS).xy;
	positionSS *= _TexelSize.z;

	float3 outColor = LOAD_TEXTURE2D_X(_OutputTexture, positionSS).xyz;
	float totalWeight = 1;

	for(int y = -_BlurSteps; y <= _BlurSteps; y++)
	{
		//int posX = positionSS.x + x * _BlurStepSize;
		int posY = positionSS.y + y * _BlurStepSize;
		//posX = max(1, posX);
		posY = max(1, posY);
		//posX = min(_ScreenSize.x - 1, posX);
		posY = min(_ScreenSize.y - 1, posY);

		uint2 blurPos = uint2(positionSS.x, posY);

		float3 neighborColor = float3(0, 0, 0);
		neighborColor += LOAD_TEXTURE2D_X(_OutputTexture, blurPos).xyz;

		float distance = abs(y);
		float weight = 1 - (distance / (_BlurSteps * _BlurStepSize));
		weight = max(0, weight);

		outColor += (neighborColor) * weight;
		totalWeight += weight;
	}

	outColor = (outColor / totalWeight);

	_OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = outColor;
}